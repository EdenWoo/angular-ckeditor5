(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ckeditor/ckeditor5-angular', ['exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (factory((global.ckeditor = global.ckeditor || {}, global.ckeditor['ckeditor5-angular'] = {}),global.ng.core,global.ng.forms,global.ng.common));
}(this, (function (exports,core,forms,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var CKEditorComponent = /** @class */ (function () {
        function CKEditorComponent(elementRef, ngZone) {
            /**
             * The initial data of the editor. Useful when not using the ngModel.
             * See https://angular.io/api/forms/NgModel to learn more.
             */
            this.data = '';
            /**
             * Tag name of the editor component.
             *
             * The default tag is 'div'.
             */
            this.tagName = 'div';
            /**
             * Fires when the editor is ready. It corresponds with the `editor#ready`
             * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready
             * event.
             */
            this.ready = new core.EventEmitter();
            /**
             * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`
             * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change
             * event.
             */
            this.change = new core.EventEmitter();
            /**
             * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`
             * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur
             * event.
             */
            this.blur = new core.EventEmitter();
            /**
             * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`
             * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus
             * event.
             */
            this.focus = new core.EventEmitter();
            /**
             * The instance of the editor created by this component.
             */
            this.editorInstance = null;
            /**
             * If the component is read–only before the editor instance is created, it remembers that state,
             * so the editor can become read–only once it is ready.
             */
            this.initialIsDisabled = false;
            this.ngZone = ngZone;
            this.elementRef = elementRef;
        }
        Object.defineProperty(CKEditorComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () {
                if (this.editorInstance) {
                    return this.editorInstance.isReadOnly;
                }
                return this.initialIsDisabled;
            },
            /**
             * When set `true`, the editor becomes read-only.
             * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly
             * to learn more.
             */
            set: /**
             * When set `true`, the editor becomes read-only.
             * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly
             * to learn more.
             * @param {?} isDisabled
             * @return {?}
             */ function (isDisabled) {
                this.setDisabledState(isDisabled);
            },
            enumerable: true,
            configurable: true
        });
        // Implementing the AfterViewInit interface.
        // Implementing the AfterViewInit interface.
        /**
         * @return {?}
         */
        CKEditorComponent.prototype.ngAfterViewInit =
            // Implementing the AfterViewInit interface.
            /**
             * @return {?}
             */
            function () {
                var _this = this;
                this.ngZone.runOutsideAngular(function () {
                    _this.createEditor();
                });
            };
        // Implementing the OnDestroy interface.
        // Implementing the OnDestroy interface.
        /**
         * @return {?}
         */
        CKEditorComponent.prototype.ngOnDestroy =
            // Implementing the OnDestroy interface.
            /**
             * @return {?}
             */
            function () {
                if (this.editorInstance) {
                    this.editorInstance.destroy();
                    this.editorInstance = null;
                }
            };
        // Implementing the ControlValueAccessor interface (only when binding to ngModel).
        // Implementing the ControlValueAccessor interface (only when binding to ngModel).
        /**
         * @param {?} value
         * @return {?}
         */
        CKEditorComponent.prototype.writeValue =
            // Implementing the ControlValueAccessor interface (only when binding to ngModel).
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                // This method is called with the `null` value when the form resets.
                // A component's responsibility is to restore to the initial state.
                if (value === null) {
                    value = '';
                }
                // If already initialized.
                if (this.editorInstance) {
                    this.editorInstance.setData(value);
                }
                // If not, wait for it to be ready; store the data.
                else {
                    this.data = value;
                }
            };
        // Implementing the ControlValueAccessor interface (only when binding to ngModel).
        // Implementing the ControlValueAccessor interface (only when binding to ngModel).
        /**
         * @param {?} callback
         * @return {?}
         */
        CKEditorComponent.prototype.registerOnChange =
            // Implementing the ControlValueAccessor interface (only when binding to ngModel).
            /**
             * @param {?} callback
             * @return {?}
             */
            function (callback) {
                this.cvaOnChange = callback;
            };
        // Implementing the ControlValueAccessor interface (only when binding to ngModel).
        // Implementing the ControlValueAccessor interface (only when binding to ngModel).
        /**
         * @param {?} callback
         * @return {?}
         */
        CKEditorComponent.prototype.registerOnTouched =
            // Implementing the ControlValueAccessor interface (only when binding to ngModel).
            /**
             * @param {?} callback
             * @return {?}
             */
            function (callback) {
                this.cvaOnTouched = callback;
            };
        // Implementing the ControlValueAccessor interface (only when binding to ngModel).
        // Implementing the ControlValueAccessor interface (only when binding to ngModel).
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        CKEditorComponent.prototype.setDisabledState =
            // Implementing the ControlValueAccessor interface (only when binding to ngModel).
            /**
             * @param {?} isDisabled
             * @return {?}
             */
            function (isDisabled) {
                // If already initialized
                if (this.editorInstance) {
                    this.editorInstance.isReadOnly = isDisabled;
                }
                // If not, wait for it to be ready; store the state.
                else {
                    this.initialIsDisabled = isDisabled;
                }
            };
        /**
         * Creates the editor instance, sets initial editor data,
         * then integrates the editor with the Angular component.
         */
        /**
         * Creates the editor instance, sets initial editor data,
         * then integrates the editor with the Angular component.
         * @return {?}
         */
        CKEditorComponent.prototype.createEditor = /**
         * Creates the editor instance, sets initial editor data,
         * then integrates the editor with the Angular component.
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var element = document.createElement(this.tagName);
                this.elementRef.nativeElement.appendChild(element);
                return ( /** @type {?} */(this.editor)).create(element, this.config)
                    .then(function (editor) {
                    _this.editorInstance = editor;
                    editor.setData(_this.data);
                    if (_this.initialIsDisabled) {
                        editor.isReadOnly = _this.initialIsDisabled;
                    }
                    _this.ngZone.run(function () {
                        _this.ready.emit(editor);
                    });
                    _this.setUpEditorEvents(editor);
                })
                    .catch(function (err) {
                    console.error(err.stack);
                });
            };
        /**
         * Integrates the editor with the component by attaching related event listeners.
         */
        /**
         * Integrates the editor with the component by attaching related event listeners.
         * @param {?} editor
         * @return {?}
         */
        CKEditorComponent.prototype.setUpEditorEvents = /**
         * Integrates the editor with the component by attaching related event listeners.
         * @param {?} editor
         * @return {?}
         */
            function (editor) {
                var _this = this;
                /** @type {?} */
                var modelDocument = editor.model.document;
                /** @type {?} */
                var viewDocument = editor.editing.view.document;
                modelDocument.on('change:data', function (evt) {
                    /** @type {?} */
                    var data = editor.getData();
                    _this.ngZone.run(function () {
                        if (_this.cvaOnChange) {
                            _this.cvaOnChange(data);
                        }
                        _this.change.emit({ event: evt, editor: editor });
                    });
                });
                viewDocument.on('focus', function (evt) {
                    _this.ngZone.run(function () {
                        _this.focus.emit({ event: evt, editor: editor });
                    });
                });
                viewDocument.on('blur', function (evt) {
                    _this.ngZone.run(function () {
                        if (_this.cvaOnTouched) {
                            _this.cvaOnTouched();
                        }
                        _this.blur.emit({ event: evt, editor: editor });
                    });
                });
            };
        CKEditorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ckeditor',
                        template: '<ng-template></ng-template>',
                        // Integration with @angular/forms.
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return CKEditorComponent; }),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        CKEditorComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.NgZone }
            ];
        };
        CKEditorComponent.propDecorators = {
            editor: [{ type: core.Input }],
            config: [{ type: core.Input }],
            data: [{ type: core.Input }],
            tagName: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            ready: [{ type: core.Output }],
            change: [{ type: core.Output }],
            blur: [{ type: core.Output }],
            focus: [{ type: core.Output }]
        };
        return CKEditorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var CKEditorModule = /** @class */ (function () {
        function CKEditorModule() {
        }
        CKEditorModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [forms.FormsModule, common.CommonModule],
                        declarations: [CKEditorComponent],
                        exports: [CKEditorComponent]
                    },] }
        ];
        return CKEditorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.CKEditorModule = CKEditorModule;
    exports.ɵa = CKEditorComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,